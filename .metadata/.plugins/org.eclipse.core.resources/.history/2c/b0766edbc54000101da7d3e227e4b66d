package com.la_casa_del_miele.microservice_auth.controller;

import com.la_casa_del_miele.microservice_auth.dto.PasswordChangeRequest;
import com.la_casa_del_miele.microservice_auth.dto.UserProfileResponse;
import com.la_casa_del_miele.microservice_auth.dto.UserUpdateRequest;
import com.la_casa_del_miele.microservice_auth.model.User;
import com.la_casa_del_miele.microservice_auth.security.CustomUserDetails;
import com.la_casa_del_miele.microservice_auth.service.UserService;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

/**
 * REST endpoint per l’account dell’utente loggato.
 * Tutte le rotte sono sotto /api/users.
 */
@RestController
@RequestMapping("/api/users")
public class UserController {

    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    /**
     * Ritorna il profilo dell’utente corrente (senza password ovviamente).
     */
    @GetMapping("/me")
    public ResponseEntity<UserProfileResponse> getMyProfile(@AuthenticationPrincipal CustomUserDetails principal) {

        User user = userService.findById(principal.getId())
                               .orElseThrow(() -> new IllegalStateException("Profilo non trovato"));

        UserProfileResponse body = new UserProfileResponse(user);
        return ResponseEntity.ok(body);
    }

    /**
     * Aggiorna nome e cognome del proprio profilo.
     */
    @PutMapping("/me")
    public ResponseEntity<Void> updateMyProfile(@AuthenticationPrincipal CustomUserDetails principal,
                                                @Valid @RequestBody UserUpdateRequest dto) {

        User user = userService.findById(principal.getId())
                               .orElseThrow(() -> new IllegalStateException("Profilo non trovato"));

        user.setNome(dto.getFirstName());
        user.setCognome(dto.getLastName());
        userService.saveUser(user);

        return ResponseEntity.noContent().build();
    }

    /**
     * Cambio password (vecchia + nuova).
     */
    @PutMapping("/me/password")
    public ResponseEntity<Void> changeMyPassword(@AuthenticationPrincipal CustomUserDetails principal,
                                                 @Valid @RequestBody PasswordChangeRequest dto) {

        userService.changePassword(principal.getId(), dto);
        return ResponseEntity.noContent().build();
    }

    /* ---------- End-point di amministrazione opzionali ---------- */

    /**
     * Solo ROLE_ADMIN: lista di tutti gli utenti.
     */
    @GetMapping
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> listUsers() {
        return ResponseEntity.ok(userService.findAllUsers());
    }

    /**
     * Solo ROLE_ADMIN: elimina un utente per id.
     */
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Void> deleteUser(@PathVariable Long id) {
        userService.deleteUser(id);
        return ResponseEntity.noContent().build();
    }
}
