package com.la_casa_del_miele.microservice_apiari.config;

import java.io.InputStream; // Importa InputStream
import java.security.KeyFactory;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.oauth2.jwt.JwtDecoder;
import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;

@Configuration
public class JwtConfig {

    // Non sono più necessari gli @Value se il file è in src/main/resources e lo carichi con getResourceAsStream

    @Bean
    public JwtDecoder jwtDecoder() throws Exception {
        // Carica la chiave pubblica dal classpath
        RSAPublicKey publicKey = loadPublicKey("/public.pem"); // Il prefisso '/' indica la root del classpath
        return NimbusJwtDecoder.withPublicKey(publicKey).build();
    }

    private RSAPublicKey loadPublicKey(String path) throws Exception {
        // Usa getClass().getResourceAsStream() per leggere dal classpath
        try (InputStream inputStream = getClass().getResourceAsStream(path)) {
            if (inputStream == null) {
                throw new RuntimeException("Public key file not found in classpath: " + path);
            }
            String key = new String(inputStream.readAllBytes())
                    .replaceAll("-----BEGIN (.*)-----", "")
                    .replaceAll("-----END (.*)----", "")
                    .replaceAll("\\s", "");

            byte[] keyBytes = Base64.getDecoder().decode(key);
            X509EncodedKeySpec spec = new X509EncodedKeySpec(keyBytes);
            return (RSAPublicKey) KeyFactory.getInstance("RSA").generatePublic(spec);
        }
    }
}